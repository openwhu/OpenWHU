module dds_module
(
	CLK, RSTn, Sin6K_Out , Sin24K_Out
);

	 input CLK;
	 input RSTn;			//SW0
	 
	 output [9:0]Sin6K_Out;
/*	 output [9:0]Sin12K_Out;*/
	 output [9:0]Sin24K_Out;
/********************************/		 
	 reg [10:0]Cnt3;
	 wire [10:0]addr24k;
	 wire [10:0]KW3 = 'b1; 
	 
	always @ ( posedge CLK or negedge RSTn )
		begin
			if( !RSTn ) 
				Cnt3 <= 11'd0;
			else if( Cnt3 == 11'd2047 )
				Cnt3 <= 11'd0;	
			else	
				Cnt3 <= Cnt3 + KW3;
		end
		
	 assign addr24k = Cnt3;
	 
/********************************/		 
	 reg [11:0]Cnt1;
	 wire [11:0]addr12k;
	 wire [11:0]KW1 = 'b1; 
	 
	always @ ( posedge CLK or negedge RSTn )
		begin
			if( !RSTn ) 
				Cnt1 <= 12'd0;
			else if( Cnt1 == 12'd4095 )
				Cnt1 <= 12'd0;	
			else	
				Cnt1 <= Cnt1 + KW1;
		end
		
	 assign addr12k = Cnt1;
/***************************************/	 
	 reg [12:0]Cnt2;
	 wire [12:0]addr6k;
	 wire [12:0]KW2 = 'b1; 
	 
	always @ ( posedge CLK or negedge RSTn )
		begin
			if( !RSTn ) 
				Cnt2 <= 13'd0;
			else if( Cnt2 == 13'd8191 )
				Cnt2 <= 13'd0;	
			else	
				Cnt2 <= Cnt2 + KW2;
		end
		
	 assign addr6k = Cnt2;
/*****************************************/	 


/*	sin12k_rom	sin12k_rom_inst 
	(
		.address ( addr12k ),		//input - from top
		.clock ( CLK ),				//input - from top
		.q ( Sin12K_Out )				//output - to top
	);
*/	
 
	sin6k_rom	sin6k_rom_inst
	(
		.address ( addr6k ),		//input - from top
		.clock ( CLK ),			//input - from top
		.q ( Sin6K_Out )			//output - to top
	);

	sin24k_rom	sin24k_rom_inst 
	(
		.address ( addr24k ),
		.clock ( CLK ),
		.q ( Sin24K_Out )
	);

/************************************/	 
	 
endmodule