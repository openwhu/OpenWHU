module responder
(
	rst,clk,start,k1,k2,k3,k4,ld1,ld2,ld3,ld4,ld5,buzzer,a_to_g0,a_to_g1,a_to_g2
);
	input wire rst,clk,start,k1,k2,k3,k4;
	output wire ld1,ld2,ld3,ld4,ld5,buzzer;
	output [6:0]a_to_g0,a_to_g1,a_to_g2;
	/******************************************
	以下信号在模块调用中既做了输入也做了输出，所以定义为wire型，reg型会报错;
	当有抢答成功信号时，蜂鸣器buzzer_1鸣声；
	当答题超时时，蜂鸣器buzzer_2报警；
	*******************************************/
	wire count_reg,buzzer_1,buzzer_2;
	 

	sel sel_inst
	(
		.rst(rst) ,	// input  rst_sig
		.clk(clk) ,	// input  clk_sig
		.start(start) ,	// input  start_sig
		.k1(k1) ,	// input  k1_sig
		.k2(k2) ,	// input  k2_sig
		.k3(k3) ,	// input  k3_sig
		.k4(k4) ,	// input  k4_sig
		.led1(ld1) ,	// output  led1_sig
		.led2(ld2) ,	// output  led2_sig
		.led3(ld3) ,	// output  led3_sig
		.led4(ld4) ,	// output  led4_sig
		.a_to_g0(a_to_g0) ,	// output [6:0] a_to_g0_sig
		.count(count_reg) ,	// output  count_sig
		.buzzer(buzzer_1) 	// output  buzzer_sig
	);

	baojing baojing_inst
	(
		.clk(clk) ,	// input  clk_sig
		.rst(rst) ,	// input  rst_sig
		.start(start) ,	// input  start_sig
		.count(count_reg) ,	// input  count_sig
		.a_to_g1(a_to_g1) ,	// output [6:0] a_to_g1_sig
		.a_to_g2(a_to_g2) ,	// output [6:0] a_to_g2_sig
		.led5(ld5) ,	// output  led5_sig
		.buzzer(buzzer_2) 	// output  buzzer_sig
	);

	assign buzzer=buzzer_1|buzzer_2; 

endmodule 