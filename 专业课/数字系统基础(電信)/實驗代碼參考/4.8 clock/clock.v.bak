/*
rst=0,低电平复位
*/
module clock(clk,rst,s1,s2,s3,s4,k1,k2,k3,buzzer,a_to_g0,a_to_g1,a_to_g2,a_to_g3,a_to_g4,a_to_g5);
input clk,rst;
input s1,k1;//星期调节输入
input s2,k2;//小时调节输入
input s3,k3;//分钟调节输入
input s4;//s4=0时，数码管显示星期
output reg [6:0]a_to_g0,a_to_g1,a_to_g2,a_to_g3,a_to_g4,a_to_g5;//七段数码管显示输出
output reg buzzer;//扬声器输出

/*
reg [13:0]clk_count1;//产生1hz时钟的分频计数器
reg clk_1hz;
reg [2:0]music_count;//产生扬声器声音频率的分频计数器
*/
reg [3:0]secl=0,sech=0;
reg [3:0]minl=0,minh=0;
reg [3:0]hourl=0,hourh=0;
reg [3:0]week=1;
reg [3:0]disp_temp;


/**************************************************************
分频模块
产生频率分别为1hz（时钟脉冲）,500hz（报时低音）,1khz（报时高音）的信号；
*************************************************************/
reg clk_1hz=0,clk_500hz=0,clk_1khz=0;//
reg [24:0]cnt1;
reg [15:0]cnt2;
reg [14:0]cnt3;
parameter T1hz=25'd25000000;//1hz（时钟脉冲）,period of clk_1hz is 1 second T1hz=25'd25000000;
parameter T500hz=16'd50000;//500hz（报时低音）T500hz=16'd50000;
parameter T1khz=15'd25000;//1khz（报时高音）T1khz=15'd25000;

always @(posedge clk or negedge rst)
begin 
	if(!rst)
		begin 
			cnt1<=0;
			cnt2<=0;
			cnt3<=0;
		end
	else if(!k1||!k2||!k3) //当小时，分钟，星期有一个要调整时
		clk_1hz<=clk_1hz;
	else if(cnt1==T1hz-25'd1)
		begin
			cnt1<=0;
			clk_1hz<=~clk_1hz;
		end
	else if(cnt2==T500hz-16'd1)
		begin
			cnt2<=0;
			clk_500hz<=~clk_500hz;
		end
	else if(cnt3==T1khz-15'd1)
		begin
			cnt3<=0;
			clk_1khz<=~clk_1khz;
		end
	else
		cnt1<=cnt1+1;
		cnt2<=cnt2+1;
		cnt3<=cnt3+1;
end


/**************************************************************
主模块
时分秒的计时;
校正星期，时，分；在校正星期时，先按下S4显示星期，再按下S1，可开始调整星期
星期的计时；
*************************************************************/
always @(negedge k1 or negedge k2 or negedge k3)
begin
	if(!s1)//校正星期，
		begin 
			if(week=='d7)
				week<=1;
			else
				week<=week+1;
		end
	else if(!s2)//校正小时,
		begin 
			if(hourl=='d9)
				begin
					hourl<=0;
					hourh<=hourh+1;
				end
			else
				begin
					if(hourh=='d2&&hourl=='d3)
						begin
							hourl<=0;
							hourh<=0;
						end
					else
						hourl<=hourl+1;
				end
		end
	else if(!s3)//校正分钟
		begin
			if(minl=='d9)
				begin
					minl<=0;
					if(minh=='d5)
						minh<=0;
					else
						minh<=minh+1;
				end					
			else 
				minl<=minl+1;
		end
end


always @(posedge clk_1hz or negedge rst)
begin
	if(!rst)
		begin 
			secl<=0;
			sech<=0;
			minl<=0;
			minh<=0;
			hourl<=0;
			hourh<=0;
			week<=1;
		end
	else /*if(s1&&s2&&s3) //当小时，分钟，星期均不调整时，
		begin*/
			if(secl=='d9) //一般运行状态
				begin 
					secl<=0;
					if(sech=='d5)
						begin
							sech<=0;
							if(minl=='d9)
								begin
									minl<=0;
									if(minh=='d5)
										begin
											minh<=0;
											if(hourl=='d9)
												begin
													hourl<=0;
													hourh<=hourh+1;
												end
											else if(hourh=='d2&&hourl=='d3)
												begin
													hourl<=0;
													hourh<=0;
													if(week==7)													
														week<=1;
													else
														week<=week+1;															
												end
											else
												hourl<=hourl+1;
										end
									else
										minh<=minh+1;
								end
							else
								minl<=minl+1;
						end
					else
						sech<=sech+1;
				end
			else
				secl<=secl+1;
		/*end*/
end

/**************************************************************
 整点报时模块
 在59分50秒开始提示，52，54，56，58秒报"嘀"；在整点00分00秒报“嗒”
*************************************************************/				
always @(posedge clk)
begin
	/*music_count<=music_count+1;
	sel<=sel+1;//扫描累加*/
	if(minh=='d5&&minl=='d9&&sech=='d5)//在59分50秒开始提示
		begin
			if((secl%2)==0)//在偶数秒开始发声
				buzzer<=clk_500hz;//嘀，此处需要换信号，用自己写的500hz的频率
			else
				buzzer<=0;
		end
	else if(minh==0&&minl==0&&sech==0&&secl==0)//整点报时，嗒
		buzzer<=clk_1khz;//嗒,此处需要换信号，用自己写的1000hz的频率
	else
		buzzer<=0;
end



/**************************************************************
数码管扫描输出模块
当S4=0时，数码管只显示星期
*************************************************************/		
always@(posedge clk)	//数码管a_to_g1显示倒计时个位
begin
	if(!s4)
		begin		
			case(week)		
			'd1:a_to_g0=7'b1111001;	
			'd2:a_to_g0=7'b0100100;
			'd3:a_to_g0=7'b0110000;
			'd4:a_to_g0=7'b0011001;
			'd5:a_to_g0=7'b0010010;
			'd6:a_to_g0=7'b0000010;
			'd7:a_to_g0=7'b0000000;
			default:a_to_g0=7'b1111111;//全灭
			endcase
			
			case(sech)
			'd0:a_to_g1=7'b1111111;
			default:a_to_g1=7'b1111111;
			endcase
			
			case(minl)
			'd0:a_to_g2=7'b1111111;
			default:a_to_g2=7'b1111111;
			endcase
			
			case(minh)
			'd0:a_to_g3=7'b1111111;
			default:a_to_g3=7'b1111111;
			endcase
			
			case(hourl)
			'd0:a_to_g4=7'b1111111;
			default:a_to_g4=7'b1111111;
			endcase
			
			case(hourh)
			'd0:a_to_g5=7'b1111111;
			default:a_to_g5=7'b1111111;
			endcase
		end
	else
		begin
			case(secl)
			'd0:a_to_g0=7'b1000000;
			'd1:a_to_g0=7'b1111001;
			'd2:a_to_g0=7'b0100100;
			'd3:a_to_g0=7'b0110000;
			'd4:a_to_g0=7'b0011001;
			'd5:a_to_g0=7'b0010010;
			'd6:a_to_g0=7'b0000010;
			'd7:a_to_g0=7'b1011000;
			'd8:a_to_g0=7'b0000000;
			'd9:a_to_g0=7'b0010000;
			default:a_to_g0=7'b1111111;
			endcase
			
			case(sech)
			'd0:a_to_g1=7'b1000000;
			'd1:a_to_g1=7'b1111001;
			'd2:a_to_g1=7'b0100100;
			'd3:a_to_g1=7'b0110000;
			'd4:a_to_g1=7'b0011001;
			'd5:a_to_g1=7'b0010010;
			default:a_to_g1=7'b1111111;
			endcase
			
			case(minl)
			'd0:a_to_g2=7'b1000000;
			'd1:a_to_g2=7'b1111001;
			'd2:a_to_g2=7'b0100100;
			'd3:a_to_g2=7'b0110000;
			'd4:a_to_g2=7'b0011001;
			'd5:a_to_g2=7'b0010010;
			'd6:a_to_g2=7'b0000010;
			'd7:a_to_g2=7'b1011000;
			'd8:a_to_g2=7'b0000000;
			'd9:a_to_g2=7'b0010000;
			default:a_to_g2=7'b1111111;
			endcase
			
			case(minh)
			'd0:a_to_g3=7'b1000000;
			'd1:a_to_g3=7'b1111001;
			'd2:a_to_g3=7'b0100100;
			'd3:a_to_g3=7'b0110000;
			'd4:a_to_g3=7'b0011001;
			'd5:a_to_g3=7'b0010010;
			default:a_to_g3=7'b1111111;
			endcase
			
			case(hourl)
			'd0:a_to_g4=7'b1000000;
			'd1:a_to_g4=7'b1111001;
			'd2:a_to_g4=7'b0100100;
			'd3:a_to_g4=7'b0110000;
			'd4:a_to_g4=7'b0011001;
			'd5:a_to_g4=7'b0010010;
			'd6:a_to_g4=7'b0000010;
			'd7:a_to_g4=7'b1011000;
			'd8:a_to_g4=7'b0000000;
			'd9:a_to_g4=7'b0010000;
			default:a_to_g4=7'b1111111;
			endcase
			
			case(hourh)
			'd0:a_to_g5=7'b1000000;
			'd1:a_to_g5=7'b1111001;
			'd2:a_to_g5=7'b0100100;
			default:a_to_g5=7'b1111111;
			endcase
		end
end

endmodule
