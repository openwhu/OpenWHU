module Buzzer_module
(
	CLK, RSTn, Buzzer_Out, Key_In, LED_Out
);
	input CLK;
	input RSTn;
	output Buzzer_Out;
	input [6:0]Key_In;
	output [7:0]LED_Out;
	
	//50M 各音调的频率
	parameter Do = 17'd95419, Re = 17'd85034, Mi = 17'd75757, Fa = 17'd71633, Sol = 17'd63775 , La = 17'd56818, Si = 17'd50607;
	
   reg [22:0]Count1;
   reg [22:0]Pulse_x;
	reg [6:0]R_Key;
	reg W_buzzer;
	
   always @ ( posedge CLK )
		begin
			if( (Pulse_x == Do) | (Pulse_x == Re) | (Pulse_x == Mi) | (Pulse_x == Fa) | (Pulse_x == Sol) | (Pulse_x == La) | (Pulse_x == Si) )
				begin
					if( Count1 == Pulse_x )
						begin
							Count1 <= 23'd0;
							W_buzzer <= ~W_buzzer;
						end
					else 
						Count1 <= Count1 + 1'b1;
				end
			else 
				begin
					W_buzzer <= 1'b1;
					Count1 <= 23'd0;
				end
				
			case(Key_In)
				7'b111_1110: Pulse_x <= Do;
				7'b111_1101: Pulse_x <= Re;
				7'b111_1011: Pulse_x <= Mi;
				7'b111_0111: Pulse_x <= Fa;
				7'b110_1111: Pulse_x <= Sol;
				7'b101_1111: Pulse_x <= La;
				7'b011_1111: Pulse_x <= Si;
				default: Pulse_x <= 20000;
			endcase
		end	
		
	assign Buzzer_Out = W_buzzer;
	//assign R_Key = Key_In;
	assign LED_Out = {1'b0,Key_In};
	
endmodule




	always @ ( posedge CLK or negedge RSTn or negedge Start ) 
	begin 	
		if( !RSTn || !Start ) //Start=0抢答未开始；抢答显示信号LED_Out,答题计时信号Count，锁存信号Block都复位，
			begin 
				LED_Out <= 4'b0;
				Block <= 0; //led灯高电平点亮;Block=0表示无人抢答，不锁存;buzzer=0表示无人抢答，蜂鸣器不响
				Buzzer <= 0;
				Count <= 0; //不启动答题计时器
				SingleNum <= 4'd0;			
				count1<='d0;									
			end
		else if( Start == 1 ) 		//Start=1开始抢答，主持人控制是否可以抢答
			begin 
				if( Count ) 	//当有人抢答成功，
					begin
						if(count1==25'd25000000)
							begin
								buzzer<=0;							
								count1<=count1;
							end
						else 
							begin
								buzzer<=1;	//倒计时为0时，蜂鸣器响,犯规灯亮
								count1<=count1+25'b1;
							end
					end	